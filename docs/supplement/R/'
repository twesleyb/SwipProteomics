#!/usr/bin/env Rscript

# work though lmerTestContrast for protein- and module- level comparisions

# fit two types of models:
# (1) protein-level model (fx1 -> fm1)
# (2) module-level model (fx2 -> fm2)

# * analyze the variance partition of each model 

root <- "~/projects/SwipProteomics"
renv::load(root)


library(lme4)


library(lmerTest)


suppressPackageStartupMessages({
  library(dplyr)
  library(data.table)
})

#renv::install("twesleyb/SwipProteomics") # github
#library(SwipProteomics)
devtools::load_all(root)

data(swip) 
data(gene_map)
data(msstats_prot)


## 1. fit protein-level model to WASHC4 ---------------------------------------

# fit protein-level model
fx1 <- "Abundance ~ 0 + Genotype:BioFraction + (1|Mixture)"
fm1 <- lmerTest::lmer(fx1, msstats_prot %>% subset(Protein == swip))

(fm1)

# examine coefficients
df <- summary(fm1,ddf="Satterthwaite")[["coefficients"]]
df <- as.data.table(df,keep.rownames="Coefficient")
colnames(df)[colnames(df) == "Pr(>|t|)"] <- "p value"
df$"p value" <- formatC(df$"p value")
df %>% knitr::kable()

L7 <- getContrast(fm1,"GenotypeMutant:BioFractionF7",
		  "GenotypeControl:BioFractionF7")

lmerTestContrast(fm1,L7) %>% mutate(Contrast="F7") %>% knitr::kable()


## 2. assess 'Mutant-Control' contrast -----------------------------------------


L8 <- getContrast(fm1,"Mutant","Control")


results <- lmerTestContrast(fm1, L8) 


# examine results
results %>% select(-isSingular) %>% 
	mutate(Contrast="Mutant-Control") %>% knitr::kable()


## 3. fit module-level model to the WASH complex -------------------------------
## the module-level model to be fit:
washc_prots <- mapID("Washc*")

## Mutant-Control comparision

# two models with the same result
fx2 <- "Abundance ~ 0 + Genotype:BioFraction + (1|Mixture) + (1|Protein)"

fm2 <- lmerTest::lmer(fx2, msstats_prot %>% filter(Protein %in% washc_prots))

# examine the model
summary(fm2,ddf="Satterthwaite")

## assess the overall comparison between Mutant and Control
L8 <- getContrast(fm2,"Mutant","Control")

results <- lmerTestContrast(fm2, L8)

# examine the results
results %>% select(-isSingular) %>% 
	mutate(Contrast = 'Mutant-Control') %>% unique() %>% knitr::kable()


## 4. alternative model -------------------------------------------------------
# alternative model with the same result

alt_fx2 <- "Abundance ~ 0 + Genotype + BioFraction + (1|Mixture) + (1|Protein)"
alt_fm2 <- lmer(alt_fx2, msstats_prot %>% filter(Protein %in% washc_prots))

L8 <- getContrast(alt_fm1, "Mutant","Control")

results <- lmerTestContrast(alt_fm2, L8)  

results %>% select(-isSingular) %>% mutate(Contrast="Mutant-Control") %>% 
	unique() %>% knitr::kable()

getVariance(alt_fm2) # sigma^2


# NOTE: fixed effects account for most of the varaition

## 5. variancePartition -------------------------------------------------------

library(variancePartition)

# variance partitioned
vp_fx <- "Abundance ~ (1|Genotype) + (1|BioFraction) + (1|Mixture) + (1|Protein)"
vp_fm <- lmerTest::lmer(vp_fx, msstats_prot %>% filter(Protein %in% washc_prots))
vp <- calcVarPart(vp_fm)
knitr::kable(t(vp))
sum(vp) == 1

## these results are the same!

# calculate partitioned variance
var_df <- as.data.frame(lme4::VarCorr(vp_fm,comp="Variance"))
mixef_var <- setNames(var_df$vcov,nm=var_df$grp) # variance of each component
round(mixef_var/sum(mixef_var),4) %>% t() %>% knitr::kable()


## qqplot protein-model fm1 ---------------------------------------------------

qqnorm(resid(fm1))
qqline(resid(fm1))


## qqplot module-model fm2 ---------------------------------------------------

qqnorm(resid(fm2))
qqline(resid(fm2))

qqnorm(resid(alt_fm2))
qqline(resid(alt_fm2))


## real world module

data(partition)

# all modules
modules <- split(names(partition),partition)[-1]
names(modules) <- paste0("M",names(modules))

# wash module and its proteins
wash_module <- paste0("M",partition[swip])
prots <- modules[[wash_module]]

knitr::kable(cbind(wash_module,nProts=length(prots)))



## Mutant-Control comparision

# two models with the same result
form2 <- "Abundance ~ 0 + Genotype:BioFraction + (1|Mixture) + (1|Protein)"
fit2 <- lmerTest::lmer(form2, msstats_prot %>% filter(Protein %in% prots))
L2 <- getContrast(fit2,"Mutant","Control")
lmerTestContrast(fit2, L2) %>% mutate(Contrast = 'Mutant-Control') %>% 
	unique() %>% knitr::kable()


form1 <- "Abundance ~ 0 + Genotype + BioFraction + (1|Mixture) + (1|Protein)"
fit1 <- lmerTest::lmer(form1, msstats_prot %>% filter(Protein %in% prots))
L1 <- getContrast(fit1,"Mutant","Control")
lmerTestContrast(fit1,L1)  %>% knitr::kable()

## fat tails

qqnorm(resid(fit0))
qqline(resid(fit0))

qqnorm(resid(fit1))
qqline(resid(fit1))

qqnorm(resid(fit2))
qqline(resid(fit2))

## proteasome example module ---------------------------------------------------

# load SwipProteomics data
data(gene_map)
data(partition)
data(msstats_prot)

# get proteomse gene list
library(geneLists) # twesleyb/geneLists

# load corum gene lists (mapped to mouse entrez)
data(corum)


## fit to proteasome

idx <- which(names(corum) == "26S proteasome")
proteasome <- mapID(corum[[idx]],"entrez","uniprot")

knitr::kable(cbind(module="proteasome",nProts=sum(proteasome %in% names(partition))))

# fit the alternative module-level model
fit <- lmerTest::lmer(alt_fx1, msstats_prot %>% subset(Protein %in% proteasome)) 

(fit)

# compute sigma
var1 <- getVariance(fm)

R2 <- var1["Fixed"]/sum(var1) # nakagawa!

R2 # the total variance explained by fixed effects


## assess Mutant-Control contrast

L8 <- getContrast(fit,"Mutant","Control")

lmerTestContrast(fit, L8) %>% knitr::kable()

# no change

knitr::kable(t(var1)) # variance of mixed and fixed effects

# highly cohesive, variance explained by Protein is 6.89%.
# variance of Fixed effects, Condition (Genotype:BioFraction)
# accounts for 0.75% of variation within the module?

# We need to know the PVE for each term!

#library(variancePartition)
vp_fx <- "Abundance ~  (1|Genotype) + (1|BioFraction) + (1|Mixture) + (1|Protein)"
vp_fm <- lmerTest::lmer(vp_fx, msstats_prot %>% subset(Protein %in% proteasome))

x <- getVariance(vp_fm) # The variance attributed to fixed effect terms is 0!
knitr::kable(t(x/sum(x))) # as a percentage of the total

# Genotype accounts for very little variation. BioFraction is the major source
# of variation for the fixed effects.  

# Interpretation:
# This module is highly cohesive. Protein variation only explains ~7% of
# variance. Variation from BioFraction dominates.


## goodness of fit
qqnorm(resid(vp_fm))
qqline(resid(vp_fm))

# this is common... fat tails


## fit to wash complex --------------------------------------------------------


data(washc_prots)

fx <- "Abundance ~ (1|Genotype) + (1|BioFraction) + (1|Mixture) + (1|Protein)"
fm <- lmerTest::lmer(fx, data = msstats_prot %>% subset(Protein %in% washc_prots))
vp0 <- calcVarPart(fm)
	
partition <- setNames(c(1,1,1,2,2),nm=washc_prots)
modules <- split(partition,partition)

fit_list <- list()
for (i in seq(modules)){
	fit_list[[i]] <- lmerTest::lmer(fx, data = msstats_prot %>% subset(Protein %in% names(modules[[i]])))
}

q0 <- as.numeric((vp0["Genotype"] + vp0["BioFraction"]) / vp0["Protein"])

vp1 <- calcVarPart(fit_list[[1]])
q1 <- as.numeric((vp1["Genotype"] + vp1["BioFraction"]) / vp1["Protein"])

vp2 <- calcVarPart(fit_list[[2]])
q2 <- as.numeric((vp2["Genotype"] + vp2["BioFraction"]) / vp2["Protein"])


